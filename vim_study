normal模式下：
vim + 文件名： 打开文件，默认进入normal模式
vim ： 进入vim，但是不打开任何文件, 后输入 ：e 文件路径，同样可以打开相应文件
h ： 左
l ： 右
j ： 下
k ： 上
shift + zz : 保存并退出vim

一般的操作，都是 operator + number + motion 组成的

[常用 action]

（作用于单个字符）
x : 删除光标所在的字符
r ：替换（replace）光标所在的字符
s ： 删除光标所在的字符，并且进入插入模式

（作用于motion 或text object）
d ：删除（delete）
p ：粘贴（paste）
c ：更改（change or cut?）
y : 复制（yank）
u ：撤销修改

[常用 motion 和 text object]
（motion）
一般的j/k/h/l都是 motion
w ：到下一个单词的开头，不包括第一个字母
e ：到当前单词的结尾，包括最后一个字母
0 ：到本行的开头
$ ：到本行的结尾
f + 字母 : 到下一个指定字符处

（text object ：可以看做是一连串定义好的text）
w : word
s : sentence
p : paragraph

aw : a word, includes surrounding white space
iw : inside the current word
it : inside current xml/html tag
ap : a paragraph
a) : a parenthesized block
i{ : inside nearest curly brackets
.......等等，可以自由组合 
double-operation : 当重复action 两次，比如 dd，yy，cc，这种是将 action 作用于一个特殊的text object，即当前所在行

[通用]
ctrl + g : 显示你当前正在编辑的文件，以及在文件中的位置
:! + shell_command : 执行外部的 shell 命令
:nmap : 查看当前所有的键位映射
. : 重复执行上一次的action, 而是 motion,注意『行间跳转』和『行内跳转』不是action, 而是 motion，比如fj，向后搜索j平跳转到第一个匹配的位置，输入. 则不会讲上述的fj再执行一次
N<command> ： 重复执行command N次，比如10x，代表删除连续的10个字符，3dd，代表删除三行文本

[复制，粘贴，剪切，以及字符的操作]
y ： 普通模式下，使用y复制
yy ：复制游标所在的整行（3yy表示复制3行）
y0 或 y^ ： 复制至行首，不包含光标所在处字符 
y$ ： 复制至行尾，包含光标所在处字符
yw ： 复制一个单词
y2w ： 复制两个单词
yG ： 复制至文本末
y1G ： 复制至文本开头
p(小写) ： 粘贴至光标后
P（大写） ： 粘贴至光标前

[删除(剪切),即删的内容都保存在剪切板里]
x ： 删除光标所在字符
X ： 删除光标所在前一个字符
dd ： 删除整行
dw ： 删除一个单词（不适用于中文）
d$ 或 D ： 删除至行尾
d^ 或 d0 ： 删除至行首
dG ： 删除至文档结尾处
d1G ： 删除至文档首部
dw : 向后删除一个单词
db ： 想前删除一个单词

[行间跳转]
nG（n shift + g） ： 游标移动到第n行
gg ： 游标移动到第一行
G （shift + g） ： 游标移动到最后一行
ctrl + o ： 在完成一次跳转后，可以使用ctrl + o 快速回到上一次光标所在位置，很实用的技巧
ctrl + i : 与 ctrl + o 方向相反
ctrl + r : redo, 即撤销 undo 的操作

[行内跳转]
w ： 到下一个单词的开头,不包括它的第一个字母
e ： 到当前单词的结尾，包括它的最后一个字母
b ： 到上一个单词的开头
ge ： 到上一个单词的结尾
0 或 ^ : 到行头
$ ： 到行尾,包括它的最后一个字母
f<字母> ： 向后搜索字母，并跳转到第一个匹配的位置，非常实用
F<字母> ： 向前搜索字母，并跳转到第一个匹配的位置
t<字母> ： 向后搜索字母，并跳转到第一个匹配位置之后的一个字母（不常用）
T<字母> ： 向后搜索字母，并跳转到第一个匹配位置之后的一个字母（不常用）

[替换]
r + 待替换字母 ： 将游标所在字母替换为指定字母
R ： 连续替换，知道按下Esc
cc ： 替换整行，即删除游标所在行，并进入插入模式
C(大写) ： 替换游标以后至行末
cw ： 替换一个单词，即删除一个单词，并进入插入模式
ce : 同 cw
~ ： 将光标所在字符变为大写/或小写
u{n} : 撤销一次或 n 次操作
U : 撤销当前行的所有修改

[查找]
/ + <字符串> ： 向下查找
？+ <字符串> ： 向上查找
% ： 用来搜索任何的括号
:s/old/new : 查找当前行并替换,但是这种只能替换掉从当前光标往后，第一个出现的 old. s 代表 substitute（替代，替代品）
:s/old/new/g ：查找当前航并替换，加了 g 这个 flag 后，可以替换到本行的所有 old
:s/old/new/gc : 查找当前内的所有 old，并针对每个弹出提示， 询问是否需要替换成 new
:%s/old/new/g : 查找整个文件的所有 old，因为加了 g 这个 flag，即替换文件中的所有 old
:%s/old/new/gc ： 查找整个文件中的所有 old，因为加了 gc 这个 flag，则在替换时针对每个弹出提示，询问是否需要换成 new
:#,#s/old/new/g : 找到#，# 行号内的所有 old，并替换为 new
\* ： 向下查找光标所在处单词
\# ： 向上查找光标所在处单词
进入查找之后，n（小写）可以继续查找，N（大写）可以反向查找

[缩进]
>> ： 将整行向右缩进
<< ： 将整行想坐缩进

[插入]
i ： 在当前光标处进行编辑
I ： 在行首插入
A ： 在行末插入
a ： 在光标后插入
o ： 在当前行后插入一个新行
O ： 在当前行前插入一个新行

----------------------------------------------
command line模式下：
在命令行模式中可以输入命令，这个命令会被执行，普通模式输入：进入命令行模式
：w  保存文档(write)
: w + <文件路径>： 将当前文件保存到文件路径中
：q！强制退出，不保存
：q  退出
：wq！  保存后强制退出
：w <文件路径>  另存为，原文件也保留
：saveas 文件路径  另存为
：x  保存并退出
：wq 保存并退出

[文件操作和 buffer]、
buffer 的概念，可以理解为 『用于储存文本的一块内存』,在 vim 中我们是操作 buffer 的，如果一块 buffer 已经与某个文件绑定，那也相当于我们操作了文件内容，如果 buffer 尚未与文件绑定，可以通过 :w + 文件名的方式，把 buffer 的内容写到文件
比如用 vim 1.txt 2.txt 3.txt 同时打开3个文件，进入时默认是编辑1.txt，但是可以：
:e + <文件名>  打开文件,打开一个新的 buffer，如果文件名不存在，则打开空的 buffer，当文件第一次保存后，就存储在这个 buffer 里
:f 显示正在编辑的文件名
:f + <文件名> 改变正在编辑的文件名
:ls 列出所有编辑过的文档,可以看到具体文档对应的buffer编号
:b + <文件名或者文件编号>  直接进入对应文件的编辑
:bn : 到下一个 buffer ，同:bnext
:bp ：到上一个 buffer，同:bprrvious
:bd + <文件名或者文件编号> 删除以前编辑过的列表中的文件项目
如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r进入文档后，输入 :ewcover + <文件名> 来恢复

[调整文本行的位置]
先将光标定位在需调整的行，按：进入命令行，然后：
ce ： 行居中
ri ： 行居右
le ： 行居左

[设置]
set nu 可以显示行号
set shiftwidth 值进行设置，可以控制缩进和回退的字符数

-----------------------------------------------
可视模式：
在普通模式下，输入 v，进入字符选择模式，就可以移动光标，光标走过的地方就会选取，再次按下 v 后，就会取消选取
在普通模式下，输入 shift + v(或者 V 大写)，进入行选择模式，上下移动光标可以选取更多的行，再次按下 shift + v 后，会取消选取
普通模式下，输入 ctrl + v，进入区域选择模式，可以进行矩形区域选择，再按一次 ctrl + v 取消选取
可视模式下，按 d 删除所选区域内容
可视模式下，按 y 复制所选区域内容


fuck_you_baby_im_your_father HI YOUdDF MOTHer
wssddff  df df d f d f
<a>sdfsfklij</a>
{sdfsfsdfsfsflksfjl}
(dsfssdfsdfl,sdfsf)
pnnnssdfnssd
pnnnssdfnssdf ddssddff  ff  df ssddff  df ddssddff  ddssddff  ddssddff  ddssddff  ddssddff 
35n4567nssdf df ssddff  df df sssssdffsdf dfdfSDssddsdfsdfsdfsdfsdflksdjfljsdkfdlfdjlsdjfldsjkljlj
sdfdsdfsldfjsdflsdjfdfldsjldsdfsfsfsdfsdkfjslfjlsd
dfsdfsdf
def function_aandb anc sdsoge sdlsdfljljjjjjkkkkkkkkkkkkdfjlsdfjithink what do
you think wo zhen de 中国是个好地反噶问你说了升级到了杰卡斯两地分居阿里斯顿放dfsdfsdsdfdfi
啦看到房价来看都是弗兰克敬爱的
sdfl
